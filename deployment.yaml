resources:
# Firewall rules
- name: msd-api-gateway
  type: compute.v1.firewall
  properties:
    network: https://www.googleapis.com/compute/v1/projects/sprint4-460918/global/networks/default
    priority: 1000
    direction: INGRESS
    sourceRanges:
    - 0.0.0.0/0
    targetTags:
    - msd-api-gateway
    allowed:
    - IPProtocol: TCP
      ports:
      - 8000
- name: msd-services-apps
  type: compute.v1.firewall
  properties:
    network: https://www.googleapis.com/compute/v1/projects/sprint4-460918/global/networks/default
    priority: 1000
    direction: INGRESS
    sourceTags:
    - msd-api-gateway
    targetTags:
    - msd-services-firewall
    allowed:
    - IPProtocol: TCP
      ports:
      - 8080
      - 8081
- name: msd-services-apps-web
  type: compute.v1.firewall
  properties:
    network: https://www.googleapis.com/compute/v1/projects/sprint4-460918/global/networks/default
    priority: 1000
    direction: INGRESS
    sourceRanges:
    - 0.0.0.0/0
    targetTags:
    - msd-services-firewall
    allowed:
    - IPProtocol: TCP
      ports:
      - 8080
      - 8081
      - 80 # AÑADIDO: Puerto para la UI (HTTP estándar)
- name: msd-relacional-db
  type: compute.v1.firewall
  properties:
    network: https://www.googleapis.com/compute/v1/projects/sprint4-460918/global/networks/default
    priority: 1000
    direction: INGRESS
    sourceTags:
    - msd-services-firewall
    targetTags:
    - msd-relacional-db
    allowed:
    - IPProtocol: TCP
      ports:
      - 5432
- name: msd-documental-db
  type: compute.v1.firewall
  properties:
    network: https://www.googleapis.com/compute/v1/projects/sprint4-460918/global/networks/default
    priority: 1000
    direction: INGRESS
    sourceTags:
      - msd-services-firewall
    targetTags:
      - msd-documental-db
    allowed:
      - IPProtocol: TCP
        ports:
          - 27017



# Router y NAT
- name: msd-router
  type: compute.v1.router
  properties:
    region: us-central1
    network: https://www.googleapis.com/compute/v1/projects/sprint4-460918/global/networks/default
    nats:
    - name: msd-nat
      natIpAllocateOption: AUTO_ONLY
      sourceSubnetworkIpRangesToNat: ALL_SUBNETWORKS_ALL_IP_RANGES



# Kong instance
- name: msd-kong-instance
  type: compute.v1.instance
  properties:
    zone: us-central1-a
    machineType: https://www.googleapis.com/compute/v1/projects/sprint4-460918/zones/us-central1-a/machineTypes/e2-micro
    disks:
    - deviceName: boot
      type: PERSISTENT
      boot: true
      autoDelete: true
      initializeParams:
        sourceImage: https://www.googleapis.com/compute/v1/projects/cos-cloud/global/images/cos-101-17162-463-8
    networkInterfaces:
    - network: https://www.googleapis.com/compute/v1/projects/sprint4-460918/global/networks/default
      networkIP: 10.128.0.81
      accessConfigs:
      - name: External NAT
        type: ONE_TO_ONE_NAT
    tags:
      items:
      - msd-api-gateway
    metadata:
      items:
      - key: startup-script
        value: |
          #!/bin/bash
          sudo mkdir /home/gateway
          cd /home/gateway
          sudo git clone https://github.com/afgomezg1/medico.git # Asumo que este repo contiene la config de Kong
          cd medico
          docker network create kong-net
          docker run -d --name kong --network=kong-net --restart=always \
          -v "$(pwd):/kong/declarative/" -e "KONG_DATABASE=off" \
          -e "KONG_DECLARATIVE_CONFIG=/kong/declarative/kong.yaml" \
          -p 8000:8000 kong/kong-gateway



# Database instances
- name: relacional-db
  type: compute.v1.instance
  properties:
    zone: us-central1-a
    machineType: https://www.googleapis.com/compute/v1/projects/sprint4-460918/zones/us-central1-a/machineTypes/e2-micro
    disks:
    - deviceName: boot
      type: PERSISTENT
      boot: true
      autoDelete: true
      initializeParams:
        sourceImage: https://www.googleapis.com/compute/v1/projects/cos-cloud/global/images/cos-101-17162-463-8
    networkInterfaces:
    - network: https://www.googleapis.com/compute/v1/projects/sprint4-460918/global/networks/default
      networkIP: 10.128.0.82
    tags:
      items:
      - msd-relacional-db
    metadata:
      items:
      - key: startup-script
        value: |
          #!/bin/bash
          docker run --restart=always -d -e POSTGRES_USER=afgomezg1 -e POSTGRES_DB=relacional_db -e POSTGRES_PASSWORD=password -p 5432:5432 --name relacional-db postgres

- name: documental-db
  type: compute.v1.instance
  properties:
    zone: us-central1-a
    machineType: https://www.googleapis.com/compute/v1/projects/sprint4-460918/zones/us-central1-a/machineTypes/e2-micro
    disks:
    - deviceName: boot
      type: PERSISTENT
      boot: true
      autoDelete: true
      initializeParams:
        sourceImage: https://www.googleapis.com/compute/v1/projects/cos-cloud/global/images/cos-101-17162-386-64
    networkInterfaces:
    - network: https://www.googleapis.com/compute/v1/projects/sprint4-460918/global/networks/default
      networkIP: 10.128.0.83
    tags:
      items:
      - msd-documental-db
    metadata:
      items:
      - key: startup-script
        value: |
          #!/bin/bash
          docker run -e MONGO_INITDB_ROOT_USERNAME=afgomezg1 -e MONGO_INITDB_ROOT_PASSWORD=password -p 27017:27017 -d mongo



# Service instances
- name: msd-medico-ms
  type: compute.v1.instance
  properties:
    zone: us-central1-a
    machineType: https://www.googleapis.com/compute/v1/projects/sprint4-460918/zones/us-central1-a/machineTypes/e2-micro
    disks:
    - deviceName: boot
      type: PERSISTENT
      boot: true
      autoDelete: true
      initializeParams:
        sourceImage: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2004-focal-v20240307b
    networkInterfaces:
    - network: https://www.googleapis.com/compute/v1/projects/sprint4-460918/global/networks/default
      networkIP: 10.128.0.84
      accessConfigs:
      - name: External NAT
        type: ONE_TO_ONE_NAT
    tags:
      items:
      - msd-services-firewall
    metadata:
      items:
      - key: startup-script
        value: |
          #!/bin/bash
          sudo apt-get update
          sudo apt install python3-pip -y
          sudo git clone https://github.com/afgomezg1/medico.git
          cd medico
          sudo pip3 install -r requirements.txt
          sudo python3 manage.py makemigrations
          sudo python3 manage.py migrate
          # Ejecutar Django en el puerto 8080. Usamos 0.0.0.0 para que sea accesible externamente.
          nohup python3 manage.py runserver 0.0.0.0:8080 > /var/log/medico-ms.log 2>&1 &
          echo "Servicio Medico Django iniciado en el puerto 8080."

- name: msd-hc-ms
  type: compute.v1.instance
  properties:
    zone: us-central1-a
    machineType: https://www.googleapis.com/compute/v1/projects/sprint4-460918/zones/us-central1-a/machineTypes/e2-micro
    disks:
    - deviceName: boot
      type: PERSISTENT
      boot: true
      autoDelete: true
      initializeParams:
        sourceImage: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2004-focal-v20240307b
    networkInterfaces:
    - network: https://www.googleapis.com/compute/v1/projects/sprint4-460918/global/networks/default
      networkIP: 10.128.0.85
      accessConfigs:
      - name: External NAT
        type: ONE_TO_ONE_NAT
    tags:
      items:
      - msd-services-firewall
    metadata:
      items:
      - key: startup-script
        value: |
          #!/bin/bash
          sudo apt-get update
          sudo apt install python3-pip -y
          sudo git clone https://github.com/afgomezg1/historia_clinica.git
          cd historia_clinica
          sudo pip3 install -r requirements.txt
          # Ejecutar Django en el puerto 8081. Esto es importante para que el servicio Java pueda distinguirlo.
          nohup python3 manage.py runserver 0.0.0.0:8081 > /var/log/hc-ms.log 2>&1 &
          echo "Servicio Historia Clinica Django iniciado en el puerto 8081."

# Microservicio de Seguridad Java (Anti-Spoofing)
- name: msd-seguridad-ms
  type: compute.v1.instance
  properties:
    zone: us-central1-a
    machineType: https://www.googleapis.com/compute/v1/projects/sprint4-460918/zones/us-central1-a/machineTypes/e2-micro
    disks:
    - deviceName: boot
      type: PERSISTENT
      boot: true
      autoDelete: true
      initializeParams:
        sourceImage: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2004-focal-v20240307b
    networkInterfaces:
    - network: https://www.googleapis.com/compute/v1/projects/sprint4-460918/global/networks/default
      networkIP: 10.128.0.86
      accessConfigs:
      - name: External NAT
        type: ONE_TO_ONE_NAT
    tags:
      items:
      - msd-services-firewall
    metadata:
      items:
      - key: startup-script
        value: |
          #!/bin/bash
          # Actualizar el sistema e instalar Java OpenJDK
          sudo apt-get update -y
          sudo apt-get install openjdk-17-jre -y

          # Ruta donde se clona el repo
          REPO_DIR="/home/anti_spoofing_service"
          GIT_REPO_URL="https://github.com/panisema2003/ANG-MS-Security.git"
          JAR_NAME="antispoofingservice-0.0.1-SNAPSHOT.jar"

          # Si el directorio no existe, clonar. Si existe, hacer un pull.
          if [ ! -d "$REPO_DIR" ]; then
            sudo git clone "$GIT_REPO_URL" "$REPO_DIR"
          else
            cd "$REPO_DIR"
            sudo git pull origin main # O la rama principal de tu repositorio
          fi

          cd "$REPO_DIR"

          # Detener el servicio si ya está corriendo
          # Busca el PID del proceso Java que ejecuta tu JAR y lo termina
          PID=$(ps aux | grep "${JAR_NAME}" | grep -v grep | awk '{print $2}')
          if [ -n "$PID" ]; then
            echo "Deteniendo el servicio Java (PID: $PID)..."
            sudo kill -9 "$PID" # kill -9 para forzar la terminación
            sleep 5 # Dar tiempo para que el proceso termine completamente
          fi

          # Ejecutar el nuevo JAR de Spring Boot en el puerto 8081
          nohup java -jar "${JAR_NAME}" --server.port=8081 > /var/log/anti-spoofing-service.log 2>&1 &

          echo "Servicio de seguridad Java iniciado/reiniciado en el puerto 8081."

# Instancia para la Interfaz de Usuario (UI) - HTML/CSS/JS
- name: msd-ui-web
  type: compute.v1.instance
  properties:
    zone: us-central1-a
    machineType: https://www.googleapis.com/compute/v1/projects/sprint4-460918/zones/us-central1-a/machineTypes/e2-micro
    disks:
    - deviceName: boot
      type: PERSISTENT
      boot: true
      autoDelete: true
      initializeParams:
        sourceImage: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2004-focal-v20240307b
    networkInterfaces:
    - network: https://www.googleapis.com/compute/v1/projects/sprint4-460918/global/networks/default
      networkIP: 10.128.0.87 # Nueva IP interna para la UI
      accessConfigs:
      - name: External NAT
        type: ONE_TO_ONE_NAT
    tags:
      items:
      - msd-services-firewall # Para que le apliquen las reglas de firewall existentes
    metadata:
      items:
      - key: startup-script
        value: |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install nginx -y # Instalar Nginx
          sudo systemctl start nginx # Iniciar Nginx
          sudo systemctl enable nginx # Habilitar Nginx para que inicie con la VM

          # Clonar tu repositorio de la UI (¡AJUSTA ESTA URL A TU REPOSITORIO DE LA UI!)
          # Asegúrate de que tus archivos HTML/CSS/JS estén en la raíz del repo o en una subcarpeta conocida
          UI_REPO_URL="https://github.com/panisema2003/ANG-UI.git"
          UI_LOCAL_PATH="/tmp/msd-ui-repo" # Directorio temporal para clonar

          sudo git clone "$UI_REPO_URL" "$UI_LOCAL_PATH"

          # Copiar los archivos de la UI al directorio de servicio de Nginx
          # Asegúrate de que index.html y otros archivos estén directamente en la raíz de tu repo
          # o ajusta el path de origen si están en una subcarpeta (ej: "$UI_LOCAL_PATH/dist/*")
          sudo cp -r "$UI_LOCAL_PATH"/* /var/www/html/

          # (Opcional) Si tu UI necesita comunicarse con los microservicios, y estás usando Kong
          # para enrutar el tráfico, tu UI deberá llamar a los endpoints de Kong.
          # Si la UI necesita llamar directamente a los microservicios (ej. Java MS en 10.128.0.86:8081),
          # asegúrate de que el código de la UI use esas IPs internas o nombres de dominio si configuraste.

          echo "Servidor Nginx para la UI iniciado y archivos desplegados."