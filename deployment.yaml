resources:
# Firewall rules
- name: msd-api-gateway
  type: compute.v1.firewall
  properties:
    network: https://www.googleapis.com/compute/v1/projects/sprint4-460918/global/networks/default
    priority: 1000
    direction: INGRESS
    sourceRanges:
    - 0.0.0.0/0
    targetTags:
    - msd-api-gateway
    allowed:
    - IPProtocol: TCP
      ports:
      - 8000
- name: msd-services-apps
  type: compute.v1.firewall
  properties:
    network: https://www.googleapis.com/compute/v1/projects/sprint4-460918/global/networks/default
    priority: 1000
    direction: INGRESS
    sourceTags:
    - msd-api-gateway
    targetTags:
    - msd-services-firewall
    allowed:
    - IPProtocol: TCP
      ports:
      - 8080
      - 8081
- name: msd-services-apps-web
  type: compute.v1.firewall
  properties:
    network: https://www.googleapis.com/compute/v1/projects/sprint4-460918/global/networks/default
    priority: 1000
    direction: INGRESS
    sourceRanges:
    - 0.0.0.0/0 # Permitir acceso desde cualquier IP para la UI (puerto 80)
    targetTags:
    - msd-services-firewall
    allowed:
    - IPProtocol: TCP
      ports:
      - 8080 # Para Django MS 1 si tuviera IP pública (no es el caso aquí)
      - 8081 # Para Django MS 2 si tuviera IP pública (no es el caso aquí)
      - 80 # Puerto para la UI (HTTP estándar)
- name: msd-relacional-db
  type: compute.v1.firewall
  properties:
    network: https://www.googleapis.com/compute/v1/projects/sprint4-460918/global/networks/default
    priority: 1000
    direction: INGRESS
    sourceTags:
    - msd-services-firewall
    targetTags:
    - msd-relacional-db
    allowed:
    - IPProtocol: TCP
      ports:
      - 5432
- name: msd-documental-db
  type: compute.v1.firewall
  properties:
    network: https://www.googleapis.com/compute/v1/projects/sprint4-460918/global/networks/default
    priority: 1000
    direction: INGRESS
    sourceTags:
      - msd-services-firewall
    targetTags:
      - msd-documental-db
    allowed:
      - IPProtocol: TCP
        ports:
          - 27017

# Router y NAT
- name: msd-router
  type: compute.v1.router
  properties:
    region: us-central1
    network: https://www.googleapis.com/compute/v1/projects/sprint4-460918/global/networks/default
    nats:
    - name: msd-nat
      natIpAllocateOption: AUTO_ONLY
      sourceSubnetworkIpRangesToNat: ALL_SUBNETWORKS_ALL_IP_RANGES

# Kong instance
- name: msd-kong-instance
  type: compute.v1.instance
  properties:
    zone: us-central1-a
    machineType: https://www.googleapis.com/compute/v1/projects/sprint4-460918/zones/us-central1-a/machineTypes/e2-micro
    disks:
    - deviceName: boot
      type: PERSISTENT
      boot: true
      autoDelete: true
      initializeParams:
        sourceImage: https://www.googleapis.com/compute/v1/projects/cos-cloud/global/images/cos-101-17162-463-8
    networkInterfaces:
    - network: https://www.googleapis.com/compute/v1/projects/sprint4-460918/global/networks/default
      networkIP: 10.128.0.81
      accessConfigs:
      - name: External NAT
        type: ONE_TO_ONE_NAT
    tags:
      items:
      - msd-api-gateway
    metadata:
      items:
      - key: startup-script
        value: |
          #!/bin/bash
          sudo mkdir /home/gateway
          cd /home/gateway
          sudo git clone https://github.com/afgomezg1/medico.git # Asumo que este repo contiene la config de Kong
          cd medico
          docker network create kong-net
          docker run -d --name kong --network=kong-net --restart=always \
          -v "$(pwd):/kong/declarative/" -e "KONG_DATABASE=off" \
          -e "KONG_DECLARATIVE_CONFIG=/kong/declarative/kong.yaml" \
          -p 8000:8000 kong/kong-gateway

# Database instances
- name: relacional-db
  type: compute.v1.instance
  properties:
    zone: us-central1-a
    machineType: https://www.googleapis.com/compute/v1/projects/sprint4-460918/zones/us-central1-a/machineTypes/e2-micro
    disks:
    - deviceName: boot
      type: PERSISTENT
      boot: true
      autoDelete: true
      initializeParams:
        sourceImage: https://www.googleapis.com/compute/v1/projects/cos-cloud/global/images/cos-101-17162-463-8
    networkInterfaces:
    - network: https://www.googleapis.com/compute/v1/projects/sprint4-460918/global/networks/default
      networkIP: 10.128.0.82
    tags:
      items:
      - msd-relacional-db
    metadata:
      items:
      - key: startup-script
        value: |
          #!/bin/bash
          docker run --restart=always -d -e POSTGRES_USER=afgomezg1 -e POSTGRES_DB=relacional_db -e POSTGRES_PASSWORD=password -p 5432:5432 --name relacional-db postgres

- name: documental-db
  type: compute.v1.instance
  properties:
    zone: us-central1-a
    machineType: https://www.googleapis.com/compute/v1/projects/sprint4-460918/zones/us-central1-a/machineTypes/e2-micro
    disks:
    - deviceName: boot
      type: PERSISTENT
      boot: true
      autoDelete: true
      initializeParams:
        sourceImage: https://www.googleapis.com/compute/v1/projects/cos-cloud/global/images/cos-101-17162-386-64
    networkInterfaces:
    - network: https://www.googleapis.com/compute/v1/projects/sprint4-460918/global/networks/default
      networkIP: 10.128.0.83
    tags:
      items:
      - msd-documental-db
    metadata:
      items:
      - key: startup-script
        value: |
          #!/bin/bash
          docker run -e MONGO_INITDB_ROOT_USERNAME=afgomezg1 -e MONGO_INITDB_ROOT_PASSWORD=password -p 27017:27017 -d mongo

# Service instances
- name: msd-medico-ms
  type: compute.v1.instance
  properties:
    zone: us-central1-a
    machineType: https://www.googleapis.com/compute/v1/projects/sprint4-460918/zones/us-central1-a/machineTypes/e2-micro
    disks:
    - deviceName: boot
      type: PERSISTENT
      boot: true
      autoDelete: true
      initializeParams:
        sourceImage: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2004-focal-v20240307b
    networkInterfaces:
    - network: https://www.googleapis.com/compute/v1/projects/sprint4-460918/global/networks/default
      networkIP: 10.128.0.84
      accessConfigs:
      - name: External NAT
        type: ONE_TO_ONE_NAT
    tags:
      items:
      - msd-services-firewall
    metadata:
      items:
      - key: startup-script
        value: |
          #!/bin/bash
          sudo apt-get update
          sudo apt install python3-pip -y
          sudo git clone https://github.com/afgomezg1/medico.git
          cd medico
          sudo pip3 install -r requirements.txt
          sudo python3 manage.py makemigrations
          sudo python3 manage.py migrate

- name: msd-hc-ms
  type: compute.v1.instance
  properties:
    zone: us-central1-a
    machineType: https://www.googleapis.com/compute/v1/projects/sprint4-460918/zones/us-central1-a/machineTypes/e2-micro
    disks:
    - deviceName: boot
      type: PERSISTENT
      boot: true
      autoDelete: true
      initializeParams:
        sourceImage: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2004-focal-v20240307b
    networkInterfaces:
    - network: https://www.googleapis.com/compute/v1/projects/sprint4-460918/global/networks/default
      networkIP: 10.128.0.85
      accessConfigs:
      - name: External NAT
        type: ONE_TO_ONE_NAT
    tags:
      items:
      - msd-services-firewall
    metadata:
      items:
      - key: startup-script
        value: |
          #!/bin/bash
          sudo apt-get update
          sudo apt install python3-pip -y
          sudo git clone https://github.com/afgomezg1/historia_clinica.git
          cd historia_clinica
          sudo pip3 install -r requirements.txt

# Microservicio de Seguridad Java (Anti-Spoofing) y UI Web
- name: msd-seguridad-ui-ms # Nuevo nombre para la VM consolidada
  type: compute.v1.instance
  properties:
    zone: us-central1-a
    machineType: https://www.googleapis.com/compute/v1/projects/sprint4-460918/zones/us-central1-a/machineTypes/e2-micro
    disks:
    - deviceName: boot
      type: PERSISTENT
      boot: true
      autoDelete: true
      initializeParams:
        sourceImage: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2004-focal-v20240307b
    networkInterfaces:
    - network: https://www.googleapis.com/compute/v1/projects/sprint4-460918/global/networks/default
      networkIP: 10.128.0.86 
      accessConfigs:
      - name: External NAT
        type: ONE_TO_ONE_NAT 
    tags:
      items:
      - msd-services-firewall # Para que le apliquen las reglas de firewall (incluida la del puerto 80)
    metadata:
      items:
      - key: startup-script
        value: |
          #!/bin/bash
          echo "Iniciando startup-script..."

          # --- CONFIGURACIÓN DE DEPENDENCIAS COMUNES ---
          sudo apt-get update -y
          sudo apt-get install -y git

          # --- CONFIGURACIÓN PARA EL MICROSERVICIO DE SEGURIDAD JAVA ---
          sudo apt-get install -y openjdk-17-jre # Solo JRE si el JAR está pre-compilado
          sudo apt-get install -y maven # Necesitas Maven si vas a compilar el JAR en la VM

          REPO_DIR_SECURITY="/home/anti_spoofing_service"
          GIT_REPO_URL_SECURITY="https://github.com/panisema2003/ANG-MS-Security.git"

          echo "Clonando/Actualizando repositorio del Microservicio de Seguridad..."
          if [ ! -d "$REPO_DIR_SECURITY" ]; then
            sudo git clone "$GIT_REPO_URL_SECURITY" "$REPO_DIR_SECURITY"
            sudo git checkout -b nicolas origin/nicolas # Branch nicolas

          else
            cd "$REPO_DIR_SECURITY"
            sudo git pull origin main # O la rama principal de tu repositorio
          fi

          # NOTA: La compilación del JAR NO se hará aquí automáticamente.
          # Si necesitas un JAR recién compilado, deberás hacerlo manualmente por SSH
          # después de cada 'git pull' (sudo mvn clean install).

          # --- CONFIGURACIÓN PARA LA UI WEB (Nginx) ---
          sudo apt-get install -y nginx

          UI_REPO_URL="https://github.com/panisema2003/ANG-UI.git" # ¡AJUSTA ESTA URL A TU REPOSITORIO DE LA UI!
          UI_LOCAL_PATH="/tmp/msd-ui-repo" # Directorio temporal para clonar
          WEB_ROOT="/var/www/html" # Directorio por defecto de Nginx para servir archivos

          echo "Limpiando y clonando/actualizando repositorio de la UI..."
          # Limpiar el directorio de Nginx para evitar conflictos con archivos antiguos
          sudo rm -rf ${WEB_ROOT}/*

          # Clonar o actualizar el repositorio de la UI
          if [ ! -d "$UI_LOCAL_PATH" ]; then
            sudo git clone "$UI_REPO_URL" "$UI_LOCAL_PATH"
          else
            cd "$UI_LOCAL_PATH"
            sudo git pull origin main
          fi

          # Copiar los archivos de la UI al directorio de servicio de Nginx
          sudo cp -r "${UI_LOCAL_PATH}/." "${WEB_ROOT}/"

          # Asegurar permisos correctos para Nginx
          sudo chown -R www-data:www-data ${WEB_ROOT}
          sudo chmod -R 755 ${WEB_ROOT}

          echo "Configuración base completada. Servicios listos para ser iniciados manualmente."